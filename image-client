#!/bin/bash


set -eu -o pipefail
shopt -s failglob


name="image-client"
version="1.0.0"


###
###
###


log_critical()
{
    [ $verbosity -ge 1 ] && echo "[CRITICAL] $@" 1>&2 || true
}


log_error()
{
    [ $verbosity -ge 2 ] && echo "[ERROR] $@" 1>&2 || true
}


log_warning()
{
    [ $verbosity -ge 3 ] && echo "[WARNING] $@" || true
}


log_info()
{
    [ $verbosity -ge 4 ] && echo "[INFO] $@" || true
}


log_debug()
{
    [ $verbosity -ge 5 ] && echo "[DEBUG] $@" 1>&2 || true
}


log_error_exit()
{
    local returncode=$1
    shift

    log_error $@
    exit $returncode
}


usage()
{
    echo "Usage: $(basename $0) [OPTION]..." 1>&2
    echo "Install the latest version of this system's image to the alternate partition." 1>&2
    echo 1>&2
    echo "  -h, --help                        display this help message and exit" 1>&2
    echo "  -v LEVEL, --verbosity LEVEL       set logging verbosity to LEVEL, default 4" 1>&2
    echo "                                    range: 0-5, verbosity increases with value" 1>&2
    echo "  -nv, --no-verify                  disable image verification" 1>&2
    echo "  -pa DEVICE, --partition-a DEVICE  use DEVICE as the currently active partition" 1>&2
    echo "                                    default: auto-detect" 1>&2
    echo "  -pb DEVICE, --partition-b DEVICE  use DEVICE as the partition to install the image to" 1>&2
    echo "  -gda ENTRY, --gdb-default-a ENTRY use ENTRY as the currently active GRUB default" 1>&2
    echo "                                    default: auto-detect" 1>&2
    echo "  -gdb ENTRY, --gdb-default-b ENTRY use ENTRY as the new GRUB default" 1>&2
    echo "  -wr URL, --wget-repository URL    use URL as the image repository" 1>&2
}


###
###
###


# Constants.
image="image.img"
image_type="${image##.}"
image_gpg="${image}.sig"

wget_args="-t 5 -T 30 --progress=dot"

dd_bs="128K"

mkfs_type="ext4"


# Default parameters.
verbosity=4
no_verify="false"

hostname=$(hostname -f)

partition_a=$(mount -l | grep "^[^[:space:]]* on / " | awk '{ print $1 }')
# partition_b=

grub_default_a=$(grep "^[[:space:]]*GRUB_DEFAULT=" /etc/default/grub | sed "s/^[[:space:]]*GRUB_DEFAULT=\"\{0,1\}\(.*\)\"\{0,1\}$/\1/")
# grub_default_b=


# Read arguments.
while [ $# -ge 1 ]
do
    case "${1}" in
        -h|--help) usage; exit 1;;
        -v|--verbosity) verbosity="${2}"; shift 2;;
        -nv|--no-verify) no_verify="true"; shift 2;;
        -pa|--partition-a) partition_a="${2}"; shift 2;;
        -pb|--partition-b) partition_b="${2}"; shift 2;;
        -gda|--grub-default-a) grub_default_a="${2}"; shift 2;;
        -gdb|--grub-default-b) grub_default_b="${2}"; shift 2;;
        -wr|--wget-repository) wget_repository="${2}"; shift 2;;
        *) usage; exit 1;;
    esac
done


# Runtime variables.
tmp_dir=$(mktemp -d "${name}.XXXXXXXXXX")


# Startup logging.
log_info "${name} version ${version}"
log_info
log_debug "verbosity: ${verbosity}"
log_debug "no_verify: ${no_verify}"
log_debug "hostname: ${hostname}"
log_debug "partition_a: ${partition_a}"
log_debug "partition_b: ${partition_b}"
log_debug "grub_default_a: ${grub_default_a}"
log_debug "grub_default_b: ${grub_default_b}"
log_debug


# Download the image for this machine, and verify its integrity.
log_info "downloading image"

while true
do
    wget ${wget_args} "${wget_repository}/${hostname}/${image}" -O "${tmp_dir}/${image}"
    wget ${wget_args} "${wget_repository}/${hostname}/${image_gpg}" -O "${tmp_dir}/${image}"

    log_info "verifying image"
    if [ "${no_verify}" = "false" ]
    then
        if gpg --verify "${tmp_dir}/${image}" "${tmp_dir}/${image_gpg}" > /dev/null 2>&1
        then
            break
        else
            log_info "image verification failed, redownloading image"
        fi
    elif [ "${no_verify}" != "true" ]
    then
        log_error_exit 1 "invalid value '${no_verify}' for no_verify"
    fi
done


# Install the image to a disk partition.
if [ "${image_type}" = "img" ]
then
    log_info "installing image using dd"
    dd if="${image}" of="${partition_b}" bs="${dd_bs}"
elif [ "${image_type}" = "tar.gz" ]
then
    log_info "installing image using mkfs/tar"
    mkfs -t "${mkfs_type}" "${partition_b}"
    mount -t "${mkfs_type}" "${partition_b}" "${tmp_dir}/root"
    tar -zxf "${tmp_dir}/${image}" "${tmp_dir}/root"
    umount -l "${tmp_dir}/root"
fi


# update-grub
# /etc/default/grub for Debian/Ubuntu
log_info "configuring GRUB"
cat > /etc/default/grub << ETC_DEFAULT_GRUB
# If you change this file, run 'update-grub' afterwards to update
# /boot/grub/grub.cfg.
# For full documentation of the options in this file, see:
#   info -f grub -n 'Simple configuration'

GRUB_DEFAULT=${grub_default_b}
GRUB_HIDDEN_TIMEOUT=0
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT=10
GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
GRUB_CMDLINE_LINUX=""

# Uncomment to enable BadRAM filtering, modify to suit your needs
# This works with Linux (no patch required) and with any kernel that obtains
# the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)
#GRUB_BADRAM="0x01234567,0xfefefefe,0x89abcdef,0xefefefef"

# Uncomment to disable graphical terminal (grub-pc only)
#GRUB_TERMINAL=console

# The resolution used on graphical terminal
# note that you can use only modes which your graphic card supports via VBE
# you can see them in real GRUB with the command `vbeinfo'
#GRUB_GFXMODE=640x480

# Uncomment if you don't want GRUB to pass "root=UUID=xxx" parameter to Linux
#GRUB_DISABLE_LINUX_UUID=true

# Uncomment to disable generation of recovery mode menu entries
#GRUB_DISABLE_RECOVERY="true"

# Uncomment to get a beep at grub start
#GRUB_INIT_TUNE="480 440 1"
ETC_DEFAULT_GRUB

log_info "updating GRUB"
update-grub -y
